{"version":3,"sources":["webpack:///./src/images/kedr2earthsfdp.svg","webpack:///./src/images/kedr2earthsfdp.png","webpack:///./src/pages/telegram-graph.js"],"names":["module","exports","TelegramGraphPage","React","username","setUsername","graphUrl","setGraphUrl","remaining","setRemaining","notFound","setNotFound","imageLoading","setImageLoading","tab","setTab","table","setTable","query","window","location","search","match","view","handleSubmit","first_time","history","pushState","fetch","then","response","json","status","id","setTimeout","left","className","href","onClick","htmlFor","type","name","value","onChange","e","target","download","replace","style","width","src","onLoad","element","document","querySelector","panzoom","marginTop","textAlign","map","row","count","title"],"mappings":"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","file":"component---src-pages-telegram-graph-js-e9d3586dd879126d6d76.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/kedr2earthsfdp-9b920a9175ab20ba6b54ab2c9e504b8f.svg\";","module.exports = __webpack_public_path__ + \"static/kedr2earthsfdp-ea8577d794b2a6b8785799b971916301.png\";","import * as React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport k2e from '../images/kedr2earthsfdp.svg'\nimport k2epng from '../images/kedr2earthsfdp.png'\nimport panzoom from \"panzoom\";\nimport \"../components/layout.css\"\nimport \"../components/graphs.css\"\n\n\n// markup\nconst TelegramGraphPage = () => {\n  const [username, setUsername] = React.useState();\n  const [graphUrl, setGraphUrl] = React.useState();\n  const [remaining, setRemaining] = React.useState();\n  const [notFound, setNotFound] = React.useState();\n  const [imageLoading, setImageLoading] = React.useState();\n  const [tab, setTab] = React.useState('graph');\n  const [table, setTable] = React.useState([]);\n\n  const parda = () => {\n    // var element = document.querySelector('#k2e')\n    // console.log(element.width / 2 - window.innerWidth / 2, element.height / 2 - window.innerHeight / 2)\n    // window.scrollTo(element.width / 2 - window.innerWidth / 2, element.height / 2 - window.innerHeight / 2)\n    setRemaining(null);\n    setImageLoading(null)\n    var element = document.querySelector('#graph')\n    panzoom(element)\n  }\n\n  React.useEffect(() => {\n    var query = window.location.search.match(/q=([^&]*)/)\n    var view = window.location.search.match(/v=([^&]*)/)\n    if (view && view[1]) {\n      setTab(view[1])\n    }\n    if (query && query[1]) {\n      setUsername(query[1])\n      handleSubmit(query[1])\n    }\n  }, [])\n\n\n  const handleSubmit = (username, first_time=true) => {\n    if (first_time) {\n      setGraphUrl(null)\n      setNotFound(null)\n      setImageLoading(null)\n      setRemaining(`подготовка...`)\n      window.history.pushState(null, null, `?q=${username}&v=${tab}`);\n    }\n    if (tab == 'table') {\n      setRemaining(\"таблица загружается...\")\n      setTable([])\n      fetch(`https://ruchei.t-a-a-s.ru/getMentionTable?username=${username}`).then((response) => {\n        return response.json()\n      }).then((response) => {\n        setRemaining(null)\n        setTable(response)\n      })\n    } else {\n      fetch(`https://ruchei.t-a-a-s.ru/getGraph?username=${username}`).then((response) => {\n        return response.json()\n      }).then(response => {\n        if (response.status == 'ready') {\n          setRemaining(\"картинка загружается...\")\n          setImageLoading(true)\n          setGraphUrl(`https://ruchei.t-a-a-s.ru/graphs/${response.id}.svg`)\n        } else if (response.status == 'not_found') {\n          setRemaining(null)\n          setNotFound(true)\n        } else if (response.status == 'preparing_image') {\n          setRemaining(`подготовка изображения...`)\n          setTimeout(() => handleSubmit(username, false), 1000)\n        } else {\n          setRemaining(`осталось ${response.left} шагов...`)\n          setTimeout(() => handleSubmit(username, false), 1000)\n        }\n      })\n    }\n  }\n\n\n  React.useEffect(() => {\n    if (username)\n      handleSubmit(username, true)\n\n  }, [tab])\n\n  return (\n    <main className=\"telegram-graph\">\n      <Helmet>\n        <title>Telegram Channel Connections graph</title>\n      </Helmet>\n      <div className=\"tg-header\">\n        <span className=\"tg-name\">anton murygin</span> <a href=\"https://t.me/joinchat/ELRK0xksBbAVmNzgYnAmGg\">группа обсуждения</a>\n      </div>\n      <div className=\"tg-tab-switch\">\n        <div className=\"tg-tab-switch-tabs\">\n          {tab == 'graph' ? <span>граф</span> : <a href=\"#\" onClick={() => setTab('graph')}>граф</a>}\n          {tab == 'table' ? <span>таблица</span> : <a href=\"#\" onClick={() => setTab('table')}>таблица</a>}\n        </div>\n      </div>\n      <div className=\"tg-container\">\n        <div className=\"tg-controls\">\n          <div>\n            <label className=\"tg-title\" htmlFor=\"username\">граф канала</label>\n          </div>\n          <div>\n            @\n            <input \n              type=\"text\"\n              name=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <button type=\"submit\" onClick={() => handleSubmit(username)}>построить</button>\n          </div>\n          {remaining && <div>\n            {remaining}\n          </div>}\n          {notFound && <div className=\"tg-alert\">\n            Чат с таким юзернеймом не найден\n          </div>}\n          <div>\n            <small className=\"tg-desc\">программа получает на вход юзернейм канала и выдает граф связанных репостами с ним каналов</small><br />-<br />\n            <small className=\"tg-desc\">в кружочке - юзернейм, название, кол-во подписчиков<br />стрелка означает - хоть раз репостил</small><br />-<br />\n            <small className=\"tg-desc\">если канал связан с каким-либо каналом не только сам по себе, но и через другой канал - дополнительная связь не строится</small><br />-<br />\n            <small className=\"tg-desc\">навигация по графику - зум колеса мыши и перетягивание</small>\n          </div>\n          {graphUrl && <div>\n            <a href={graphUrl} download>скачать .svg</a>\n          </div>}\n          {graphUrl && <div>\n            <a href={graphUrl.replace('.svg', '.dot')} download>скачать .dot</a>\n          </div>}\n        </div>\n        {tab == 'graph' && <div className=\"tg-map\">\n          <img id=\"graph\" style={{ width: '100%' }} src={graphUrl} onLoad={parda} />\n          {imageLoading && <div style={{marginTop: '50vh', textAlign: 'center'}}>\n              картинка загружается...\n            </div>}\n        </div>}\n        {tab == 'table' && <div className=\"tg-table\">\n          <code>\n            <div>\n              таблица каналов в сети сортированная по количеству упоминаний<br/>\n            </div>\n            <div>\n              совокупное кол-во меншенов | юзернейм | тайтл\n            </div>\n            {table.map(row => <div>\n              {row.count} {row.username || \"неизвестно\"} {row.title || \"неизвестно\"}\n              </div>)}\n          </code>\n        </div>}\n      </div>\n      {/* <img id=\"k2e\" style={{ width: '200%' }} src={k2e} onLoad={parda} /> */}\n      {/* <img id=\"k2e\" style={{width: '100%'}} src={k2epng} onLoad={parda} /> */}\n    </main>\n  )\n}\n\nexport default TelegramGraphPage\n"],"sourceRoot":""}