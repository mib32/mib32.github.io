{"version":3,"sources":["webpack:///./src/images/kedr2earthsfdp.svg","webpack:///./src/images/kedr2earthsfdp.png","webpack:///./src/pages/telegram-graph.js"],"names":["module","exports","TelegramGraphPage","React","username","setUsername","graphUrl","setGraphUrl","remaining","setRemaining","notFound","setNotFound","matches","window","location","search","match","handleSubmit","first_time","history","pushState","fetch","then","response","json","status","id","setTimeout","left","className","href","htmlFor","type","name","value","onChange","e","target","onClick","style","width","src","onLoad","element","document","querySelector","panzoom"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,8D,yECA3CD,EAAOC,QAAU,IAA0B,8D,kCCA3C,kGAwGeC,UA9FW,WAAO,IAAD,EACEC,aAAzBC,EADuB,KACbC,EADa,OAEEF,aAAzBG,EAFuB,KAEbC,EAFa,OAGIJ,aAA3BK,EAHuB,KAGZC,EAHY,OAIEN,aAAzBO,EAJuB,KAIbC,EAJa,KAc9BR,aAAgB,WACd,IAAIS,EAAUC,OAAOC,SAASC,OAAOC,MAAM,cACvCJ,GAAWA,EAAQ,KACrBP,EAAYO,EAAQ,IACpBK,EAAaL,EAAQ,OAEtB,IAGH,IAAMK,EAAe,SAAfA,EAAgBb,EAAUc,QAAoB,IAApBA,OAAW,GACrCA,IACFX,EAAY,MACZI,EAAY,MACZF,EAAa,iBACbI,OAAOM,QAAQC,UAAU,KAAM,KAA/B,MAA2ChB,IAE7CiB,MAAM,2CAA2CjB,GAAYkB,MAAK,SAACC,GACjE,OAAOA,EAASC,UACfF,MAAK,SAAAC,GACiB,SAAnBA,EAASE,QACXhB,EAAa,MACbF,EAAY,gCAAgCgB,EAASG,GAA1C,SACiB,aAAnBH,EAASE,QAClBhB,EAAa,MACbE,GAAY,IACgB,mBAAnBY,EAASE,QAClBhB,EAAa,6BACbkB,YAAW,kBAAMV,EAAab,GAAU,KAAQ,OAEhDK,EAAa,YAAYc,EAASK,KAAtB,aACZD,YAAW,kBAAMV,EAAab,GAAU,KAAQ,UAKtD,OACE,wBAAMyB,UAAU,kBACd,gBAAC,IAAD,KACE,oEAEF,uBAAKA,UAAU,aACb,wBAAMA,UAAU,WAAhB,iBADF,IACiD,qBAAGC,KAAK,gDAAR,sBAEjD,uBAAKD,UAAU,gBACb,uBAAKA,UAAU,eACb,2BACE,yBAAOA,UAAU,WAAWE,QAAQ,YAApC,gBAEF,+BAEE,yBACEC,KAAK,OACLC,KAAK,WACLC,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OAAO/B,EAAY+B,EAAEC,OAAOH,UAExC,0BAAQF,KAAK,SAASM,QAAS,kBAAMrB,EAAab,KAAlD,cAEDI,GAAa,2BACXA,GAEFE,GAAY,uBAAKmB,UAAU,YAAf,oCAGb,2BACE,yBAAOA,UAAU,WAAjB,8FAA6H,2BAD/H,IACsI,2BACpI,yBAAOA,UAAU,WAAjB,uDAAsF,2BAFxF,IAE+F,2BAC7F,yBAAOA,UAAU,WAAjB,8HAGJ,uBAAKA,UAAU,UACb,uBAAKH,GAAG,QAAQa,MAAO,CAAEC,MAAO,QAAUC,IAAKnC,EAAUoC,OA/EnD,WAIZ,IAAIC,EAAUC,SAASC,cAAc,UACrCC,IAAQH","file":"component---src-pages-telegram-graph-js-f83d7c7dfdea3c7627cf.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/kedr2earthsfdp-9b920a9175ab20ba6b54ab2c9e504b8f.svg\";","module.exports = __webpack_public_path__ + \"static/kedr2earthsfdp-ea8577d794b2a6b8785799b971916301.png\";","import * as React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport k2e from '../images/kedr2earthsfdp.svg'\nimport k2epng from '../images/kedr2earthsfdp.png'\nimport panzoom from \"panzoom\";\nimport \"../components/layout.css\"\nimport \"../components/graphs.css\"\n\n\n// markup\nconst TelegramGraphPage = () => {\n  const [username, setUsername] = React.useState();\n  const [graphUrl, setGraphUrl] = React.useState();\n  const [remaining, setRemaining] = React.useState();\n  const [notFound, setNotFound] = React.useState();\n\n  const parda = () => {\n    // var element = document.querySelector('#k2e')\n    // console.log(element.width / 2 - window.innerWidth / 2, element.height / 2 - window.innerHeight / 2)\n    // window.scrollTo(element.width / 2 - window.innerWidth / 2, element.height / 2 - window.innerHeight / 2)\n    var element = document.querySelector('#graph')\n    panzoom(element)\n  }\n\n  React.useEffect(() => {\n    var matches = window.location.search.match(/\\?q=(.+)&?/)\n    if (matches && matches[1]) {\n      setUsername(matches[1])\n      handleSubmit(matches[1])\n    }\n  }, [])\n\n\n  const handleSubmit = (username, first_time=true) => {\n    if (first_time) {\n      setGraphUrl(null)\n      setNotFound(null)\n      setRemaining(`подготовка...`)\n      window.history.pushState(null, null, `?q=${username}`);\n    }\n    fetch(`http://84.201.174.106/getGraph?username=${username}`).then((response) => {\n      return response.json()\n    }).then(response => {\n      if (response.status == 'ready') {\n        setRemaining(null)\n        setGraphUrl(`http://84.201.174.106/graphs/${response.id}.svg`)\n      } else if (response.status == 'not_found') {\n        setRemaining(null)\n        setNotFound(true)\n      } else if (response.status == 'preparing_image') {\n        setRemaining(`подготовка изображения...`)\n        setTimeout(() => handleSubmit(username, false), 1000)\n      } else {\n        setRemaining(`осталось ${response.left} шагов...`)\n        setTimeout(() => handleSubmit(username, false), 1000)\n      }\n    })\n  }\n\n  return (\n    <main className=\"telegram-graph\">\n      <Helmet>\n        <title>Telegram Channel Connections graph</title>\n      </Helmet>\n      <div className=\"tg-header\">\n        <span className=\"tg-name\">anton murygin</span> <a href=\"https://t.me/joinchat/ELRK0xksBbAVmNzgYnAmGg\">группа обсуждения</a>\n      </div>\n      <div className=\"tg-container\">\n        <div className=\"tg-controls\">\n          <div>\n            <label className=\"tg-title\" htmlFor=\"username\">граф канала</label>\n          </div>\n          <div>\n            @\n            <input \n              type=\"text\"\n              name=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <button type=\"submit\" onClick={() => handleSubmit(username)}>построить</button>\n          </div>\n          {remaining && <div>\n            {remaining}\n          </div>}\n          {notFound && <div className=\"tg-alert\">\n            Чат с таким юзернеймом не найден\n          </div>}\n          <div>\n            <small className=\"tg-desc\">программа получает на вход юзернейм канала и выдает граф связанных репостами с ним каналов</small><br />-<br />\n            <small className=\"tg-desc\">в кружочке - юзернейм, название, кол-во подписчиков</small><br />-<br />\n            <small className=\"tg-desc\">если канал связан с каким-либо каналом не только сам по себе, но и через другой канал - дополнительная связь не строится</small>\n          </div>\n        </div>\n        <div className=\"tg-map\">\n          <img id=\"graph\" style={{ width: '100%' }} src={graphUrl} onLoad={parda} />\n        </div>\n      </div>\n      {/* <img id=\"k2e\" style={{ width: '200%' }} src={k2e} onLoad={parda} /> */}\n      {/* <img id=\"k2e\" style={{width: '100%'}} src={k2epng} onLoad={parda} /> */}\n    </main>\n  )\n}\n\nexport default TelegramGraphPage\n"],"sourceRoot":""}